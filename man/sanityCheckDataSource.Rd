% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/util-dataSource.R
\name{sanityCheckDataSource}
\alias{sanityCheckDataSource}
\title{Function to exercise the core features and calls of a DataSource}
\usage{
sanityCheckDataSource(DATA_SOURCE, useCache = FALSE)
}
\arguments{
\item{DATA_SOURCE}{The DataSource to be tested. In VISDOM, there is a convention to put the 
active \code{DataSource} into the global environment with the name DATA_SOURCE, so this code follows that
naming convention, even though you are passing in the data source.}

\item{useCache}{Boolean to control whether or not the DataSource should rely upon its data cache to
retrieve data. If True and called with an empty cache, the function can be used to pre-populate the 
caches with id lists, geo code, meter data by geo code, and weather data by geo code.}
}
\description{
This function exercises the core functions of a \code{\link{DataSource}}, allowing DataSource authors to 
check if their DataSource meets the minimal obligations of data retrieval and formatting.
It can also be used to pre-populate data caches before a feature run.
}
\details{
While these checks are not comprehensive, they represent the main functions exercised during a feature 
extraction run. DataSource authors should feel free to add functions to their DataSource and alter 
existing function signatures to meet their individual requirements. As long as this function still runs
without errors, generic iterator functions should still work. The iterator relies on the ability to break
ids and meter data down to geo code level sub-groups, to request all weather and meter data for a zip code,
and to be able to instantiate a MeterDataClass object with the returned meter data and weather data. 

If this function no longer runs on your \code{DataSource}, then advanced users can write their own 
iteration methods that break down the feature extraction problem differently.
}
\seealso{
\code{\link{DataSource}}
}

